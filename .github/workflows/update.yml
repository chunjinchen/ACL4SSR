name: Daily Fork Update

on:
  workflow_dispatch:
  push:
  schedule:
    - cron: "0 0 * * *"  # 每天 UTC 时间 00:00 触发，可根据需求调整触发时间

jobs:
  update_fork:
    name: Update Fork and Commit Changes
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Configure Git
        run: |
          git config user.name "guyuuan"
          git config user.email "chunjinchen1998@gmail.com"

      - name: Fetch Upstream Changes
        continue-on-error: true
        run: |
          git fetch origin
          git checkout master 
          git remote add upstream https://github.com/ACL4SSR/ACL4SSR.git
          git fetch upstream
          git rebase upstream/master 
          # 先将合并后的结果提交到远程
          git push origin master

      - name: Start Convert
        id: convert
        run: |
          pushd ./Clash/config || return 1
          count=0
          # 使用find命令递归查找当前目录及其子目录下的所有文件，但排除.sh和.md文件
          mapfile -d '' file_list < <(find . -type f -not -name '*.sh' -not -path './.*/*' -not -name '*.md' -print0)
          # 遍历文件列表
          #while IFS= read -r -d '' file; do
          for file in "${file_list[@]}"; do
            # 使用sed命令进行替换，并将结果写回原文件,并返回是否替换成功的状态码
            c=$(sed -n 's|https://raw\.githubusercontent\.com/ACL4SSR/ACL4SSR/master|https://cdn\.jsdelivr\.net/gh/guyuuan/ACL4SSR@master|gp' "$file" | sed -n '=' | wc -l )
            sed -i 's|https://raw\.githubusercontent\.com/ACL4SSR/ACL4SSR/master|https://cdn\.jsdelivr\.net/gh/guyuuan/ACL4SSR@master|g' "$file"
            if [ $c -gt 0 ]; then
              count=$( expr $count + $c)
              echo "替换成功[$count,$c]: $file"
            fi
          done
          echo "替换总数: ${count}"
          # 如果sum大于0返回success，否则返回fail
          if [ ${count} -gt 0 ]; then
            echo "success"
            echo "CONVERT_RESULT=success" >> "$GITHUB_OUTPUT"
          else
            echo "CONVERT_RESULT=fail" >> "$GITHUB_OUTPUT"
          fi

      - name: Commit Changes
        env: 
          CONVERT_RESULT: ${{ steps.convert.outputs.CONVERT_RESULT }}
        run: |
          #!/bin/bash
          # 定义一个处理异常的函数
          handle_error() {
            e=$?
            echo "发生异常，退出状态码：$e"
            if [ $e -eq 1 ]; then
              exit 0
            else
              exit 1
            fi
          }
          
          # 捕获异常并调用处理函数
          trap handle_error ERR
          
          set -e
          # 获取上一个步骤（convert）的输出
          status=$CONVERT_RESULT
          echo "status: $status"
          if [ "$status" == "fail" ]; then
            exit 0
          else  
            git add .  
            git commit -m "Daily update: $(date +'%Y-%m-%d')"
            git push origin master
          fi
